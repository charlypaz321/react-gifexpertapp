{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAIaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAG3B,EAAsCC,mBAAS,IAA/C,mBAAQC,EAAR,KAAoBC,EAApB,KAoBA,OACI,uBAAMC,SAbW,SAAEC,GACnBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMlB,cACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAtBc,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,c,+BCVnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAGFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZvB,kBAiBZM,GAjBY,4CAAH,sDCCPO,EAAc,SAAC,GAAyB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAItC,OAFAc,QAAQC,IAAKN,EAAIC,EAAOV,GAGpB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,kCAAMA,EAAN,WCJCS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAEtB,ECHwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WACP1B,EAASC,GACR0B,MAAM,SAAAC,GACHH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAGlB,CAACtB,IAIGuB,EDhB0BK,CAAc5B,GAAlCa,EAAb,EAAQN,KAAae,EAArB,EAAqBA,QAEjB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDlB,EAArD,OAEEsB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAGYL,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aEfjCkB,EAAgB,WAGzB,MAAsC3C,mBAAS,CAAC,oBAAhD,mBAAQ4C,EAAR,KAAoB7C,EAApB,KAMA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAFjC,IAGI,uBAHJ,IAKI,mCAEQ6C,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,aAD0B,CACzB,EAAD,CAEIA,SAAWA,GADLA,aCnBlC+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9b4cfdf6.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { PropTypes } from 'prop-types';\r\n\r\n//Para conectar los dos componentes, agregamos como props \"setCategories\" en el argumento\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    //Definimos la variable que guardará lo que escribamos en el input text\r\n    const [ inputValue, setInputValue ] = useState(''); //Definimos el estado inicial, de no hacerlo quedará como undefined\r\n\r\n    //Con esta función flecha podremos cambiar el valor del input text y verlo en la página web\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    //Función de flecha para controlar el evento a presionar Enter\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault(); //Con esta función prevenimos a que se recargue la página cuando damos Enter\r\n\r\n        //La función trim elimina los espacios en blanco antes o después del texto\r\n        if( inputValue.trim().length > 2 ){\r\n            //Con un callback llamamos el estado inicial y le agrega el nuevo texto del input al dar Enter\r\n            setCategories( cats => [ inputValue, ...cats, ] );\r\n            setInputValue(''); //Limpiamos el input text\r\n        }\r\n        //console.log('Submit hecho');\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }> {/*Llamamos a la función handleSubmit*/}\r\n            <input\r\n                type=\"text\" //Entrada de tipo texto\r\n                value={ inputValue } //Pasamos el valor inicial del input\r\n                onChange={ handleInputChange } //Llamamos a la función para poder modificar el texto en el input\r\n            />\r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","//Con esta función hacemos la petición http para las imágenes de la categoría recibida\r\nexport const getGifs = async( category ) => {\r\n    //Peticiones http en Javascript    //La función encodeURI sirve para evitar los espacios en blanco\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=S6z6pT6ICa4njWSHFRmQK6WE6tcVAmRh`;\r\n    const resp = await fetch( url );\r\n    //Desestructuramos con { }\r\n    const { data } = await resp.json();\r\n\r\n    //Acá obtenemos solo los datos que necesitamos de data\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url //El signo ? es una alternativa del condicional if\r\n            //El signo de interrogación pregunta que si vienen la imágenes entonces las utilice\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url} ) => {\r\n\r\n    console.log( id, title, url );\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title } />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n//A través de la props category enviamos la categoría deseada\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n        return (\r\n            <>\r\n                <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\r\n\r\n                { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n\r\n                <div className=\"card-grid\">\r\n\r\n                        { \r\n                            images.map( img => (\r\n                                <GifGridItem \r\n                                    key={ img.id }\r\n                                    { ...img }\r\n                                />\r\n                            ))\r\n                        }\r\n\r\n                </div>\r\n            </>    \r\n        )\r\n    \r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n        .then( imgs => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n        })\r\n    }, [category])  \r\n\r\n   \r\n\r\n    return state; //data: [], loading: true\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp  = () => {\r\n\r\n    //Definimos un arreglo y el estado inicial del arreglo con elementos\r\n    const [ categories, setCategories ] = useState(['Legend of Zelda']);\r\n\r\n    // const handleAdd = () => {\r\n    //     setCategories( [...categories, 'Jazz'] );\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } /> {/* Agregamos el componente AddCategory a nuestra página padre */}\r\n            <hr /> {/*Barra divisoria*/}\r\n\r\n            <ol> {/*Order list */}\r\n                {\r\n                    categories.map( category => ( // Ciclo para mostrar los elementos\r\n                        <GifGrid\r\n                            key={ category }\r\n                            category={ category }\r\n                        />    \r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n\r\n\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}